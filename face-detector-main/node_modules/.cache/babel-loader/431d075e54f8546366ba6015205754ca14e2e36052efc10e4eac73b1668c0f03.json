{"ast":null,"code":"(function (module) {\n  'use strict';\n\n  module.exports.is_uri = is_iri;\n  module.exports.is_http_uri = is_http_iri;\n  module.exports.is_https_uri = is_https_iri;\n  module.exports.is_web_uri = is_web_iri;\n  // Create aliases\n  module.exports.isUri = is_iri;\n  module.exports.isHttpUri = is_http_iri;\n  module.exports.isHttpsUri = is_https_iri;\n  module.exports.isWebUri = is_web_iri;\n\n  // private function\n  // internal URI spitter method - direct from RFC 3986\n  var splitUri = function (uri) {\n    var splitted = uri.match(/(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/);\n    return splitted;\n  };\n  function is_iri(value) {\n    if (!value) {\n      return;\n    }\n\n    // check for illegal characters\n    if (/[^a-z0-9\\:\\/\\?\\#\\[\\]\\@\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\.\\-\\_\\~\\%]/i.test(value)) return;\n\n    // check for hex escapes that aren't complete\n    if (/%[^0-9a-f]/i.test(value)) return;\n    if (/%[0-9a-f](:?[^0-9a-f]|$)/i.test(value)) return;\n    var splitted = [];\n    var scheme = '';\n    var authority = '';\n    var path = '';\n    var query = '';\n    var fragment = '';\n    var out = '';\n\n    // from RFC 3986\n    splitted = splitUri(value);\n    scheme = splitted[1];\n    authority = splitted[2];\n    path = splitted[3];\n    query = splitted[4];\n    fragment = splitted[5];\n\n    // scheme and path are required, though the path can be empty\n    if (!(scheme && scheme.length && path.length >= 0)) return;\n\n    // if authority is present, the path must be empty or begin with a /\n    if (authority && authority.length) {\n      if (!(path.length === 0 || /^\\//.test(path))) return;\n    } else {\n      // if authority is not present, the path must not start with //\n      if (/^\\/\\//.test(path)) return;\n    }\n\n    // scheme must begin with a letter, then consist of letters, digits, +, ., or -\n    if (!/^[a-z][a-z0-9\\+\\-\\.]*$/.test(scheme.toLowerCase())) return;\n\n    // re-assemble the URL per section 5.3 in RFC 3986\n    out += scheme + ':';\n    if (authority && authority.length) {\n      out += '//' + authority;\n    }\n    out += path;\n    if (query && query.length) {\n      out += '?' + query;\n    }\n    if (fragment && fragment.length) {\n      out += '#' + fragment;\n    }\n    return out;\n  }\n  function is_http_iri(value, allowHttps) {\n    if (!is_iri(value)) {\n      return;\n    }\n    var splitted = [];\n    var scheme = '';\n    var authority = '';\n    var path = '';\n    var port = '';\n    var query = '';\n    var fragment = '';\n    var out = '';\n\n    // from RFC 3986\n    splitted = splitUri(value);\n    scheme = splitted[1];\n    authority = splitted[2];\n    path = splitted[3];\n    query = splitted[4];\n    fragment = splitted[5];\n    if (!scheme) return;\n    if (allowHttps) {\n      if (scheme.toLowerCase() != 'https') return;\n    } else {\n      if (scheme.toLowerCase() != 'http') return;\n    }\n\n    // fully-qualified URIs must have an authority section that is\n    // a valid host\n    if (!authority) {\n      return;\n    }\n\n    // enable port component\n    if (/:(\\d+)$/.test(authority)) {\n      port = authority.match(/:(\\d+)$/)[0];\n      authority = authority.replace(/:\\d+$/, '');\n    }\n    out += scheme + ':';\n    out += '//' + authority;\n    if (port) {\n      out += port;\n    }\n    out += path;\n    if (query && query.length) {\n      out += '?' + query;\n    }\n    if (fragment && fragment.length) {\n      out += '#' + fragment;\n    }\n    return out;\n  }\n  function is_https_iri(value) {\n    return is_http_iri(value, true);\n  }\n  function is_web_iri(value) {\n    return is_http_iri(value) || is_https_iri(value);\n  }\n})(module);","map":{"version":3,"names":["module","exports","is_uri","is_iri","is_http_uri","is_http_iri","is_https_uri","is_https_iri","is_web_uri","is_web_iri","isUri","isHttpUri","isHttpsUri","isWebUri","splitUri","uri","splitted","match","value","test","scheme","authority","path","query","fragment","out","length","toLowerCase","allowHttps","port","replace"],"sources":["C:/Users/shiva/Programs/node apps/face-detector-v1/face-detector-main/node_modules/valid-url/index.js"],"sourcesContent":["(function(module) {\r\n    'use strict';\r\n\r\n    module.exports.is_uri = is_iri;\r\n    module.exports.is_http_uri = is_http_iri;\r\n    module.exports.is_https_uri = is_https_iri;\r\n    module.exports.is_web_uri = is_web_iri;\r\n    // Create aliases\r\n    module.exports.isUri = is_iri;\r\n    module.exports.isHttpUri = is_http_iri;\r\n    module.exports.isHttpsUri = is_https_iri;\r\n    module.exports.isWebUri = is_web_iri;\r\n\r\n\r\n    // private function\r\n    // internal URI spitter method - direct from RFC 3986\r\n    var splitUri = function(uri) {\r\n        var splitted = uri.match(/(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/);\r\n        return splitted;\r\n    };\r\n\r\n    function is_iri(value) {\r\n        if (!value) {\r\n            return;\r\n        }\r\n\r\n        // check for illegal characters\r\n        if (/[^a-z0-9\\:\\/\\?\\#\\[\\]\\@\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\.\\-\\_\\~\\%]/i.test(value)) return;\r\n\r\n        // check for hex escapes that aren't complete\r\n        if (/%[^0-9a-f]/i.test(value)) return;\r\n        if (/%[0-9a-f](:?[^0-9a-f]|$)/i.test(value)) return;\r\n\r\n        var splitted = [];\r\n        var scheme = '';\r\n        var authority = '';\r\n        var path = '';\r\n        var query = '';\r\n        var fragment = '';\r\n        var out = '';\r\n\r\n        // from RFC 3986\r\n        splitted = splitUri(value);\r\n        scheme = splitted[1]; \r\n        authority = splitted[2];\r\n        path = splitted[3];\r\n        query = splitted[4];\r\n        fragment = splitted[5];\r\n\r\n        // scheme and path are required, though the path can be empty\r\n        if (!(scheme && scheme.length && path.length >= 0)) return;\r\n\r\n        // if authority is present, the path must be empty or begin with a /\r\n        if (authority && authority.length) {\r\n            if (!(path.length === 0 || /^\\//.test(path))) return;\r\n        } else {\r\n            // if authority is not present, the path must not start with //\r\n            if (/^\\/\\//.test(path)) return;\r\n        }\r\n\r\n        // scheme must begin with a letter, then consist of letters, digits, +, ., or -\r\n        if (!/^[a-z][a-z0-9\\+\\-\\.]*$/.test(scheme.toLowerCase()))  return;\r\n\r\n        // re-assemble the URL per section 5.3 in RFC 3986\r\n        out += scheme + ':';\r\n        if (authority && authority.length) {\r\n            out += '//' + authority;\r\n        }\r\n\r\n        out += path;\r\n\r\n        if (query && query.length) {\r\n            out += '?' + query;\r\n        }\r\n\r\n        if (fragment && fragment.length) {\r\n            out += '#' + fragment;\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    function is_http_iri(value, allowHttps) {\r\n        if (!is_iri(value)) {\r\n            return;\r\n        }\r\n\r\n        var splitted = [];\r\n        var scheme = '';\r\n        var authority = '';\r\n        var path = '';\r\n        var port = '';\r\n        var query = '';\r\n        var fragment = '';\r\n        var out = '';\r\n\r\n        // from RFC 3986\r\n        splitted = splitUri(value);\r\n        scheme = splitted[1]; \r\n        authority = splitted[2];\r\n        path = splitted[3];\r\n        query = splitted[4];\r\n        fragment = splitted[5];\r\n\r\n        if (!scheme)  return;\r\n\r\n        if(allowHttps) {\r\n            if (scheme.toLowerCase() != 'https') return;\r\n        } else {\r\n            if (scheme.toLowerCase() != 'http') return;\r\n        }\r\n\r\n        // fully-qualified URIs must have an authority section that is\r\n        // a valid host\r\n        if (!authority) {\r\n            return;\r\n        }\r\n\r\n        // enable port component\r\n        if (/:(\\d+)$/.test(authority)) {\r\n            port = authority.match(/:(\\d+)$/)[0];\r\n            authority = authority.replace(/:\\d+$/, '');\r\n        }\r\n\r\n        out += scheme + ':';\r\n        out += '//' + authority;\r\n        \r\n        if (port) {\r\n            out += port;\r\n        }\r\n        \r\n        out += path;\r\n        \r\n        if(query && query.length){\r\n            out += '?' + query;\r\n        }\r\n\r\n        if(fragment && fragment.length){\r\n            out += '#' + fragment;\r\n        }\r\n        \r\n        return out;\r\n    }\r\n\r\n    function is_https_iri(value) {\r\n        return is_http_iri(value, true);\r\n    }\r\n\r\n    function is_web_iri(value) {\r\n        return (is_http_iri(value) || is_https_iri(value));\r\n    }\r\n\r\n})(module);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}